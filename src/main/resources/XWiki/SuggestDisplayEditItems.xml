<?xml version="1.0" encoding="UTF-8"?>
<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc>
  <web>XWiki</web>
  <name>SuggestDisplayEditItems</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>XWiki.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1425480288000</creationDate>
  <date>1426150490000</date>
  <contentUpdateDate>1426150271000</contentUpdateDate>
  <version>1.1</version>
  <title>SuggestDisplayEditItems</title>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>XWiki.SuggestDisplayEditItems</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>c25c0c80-67dc-480a-ab8f-db047209ad14</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>// Make sure the XWiki 'namespace' and the ModalPopup class exist.
if(typeof(XWiki) == "undefined" || typeof(XWiki.widgets) == "undefined" || typeof(XWiki.widgets.ModalPopup) == "undefined") {
 if (typeof console != "undefined" &amp;&amp; typeof console.warn == "function") {
    console.warn("[MessageBox widget] Required class missing: XWiki.widgets.ModalPopup");
  }
} else {

XWiki.widgets.EditModePopup = Class.create(XWiki.widgets.ModalPopup, {
 /** Default parameters can be added to the custom class. */
  defaultInteractionParameters : {
  },
 /** Constructor. Registers the key listener that pops up the dialog. */
  initialize : function($super, interactionParameters) {
   this.interactionParameters = Object.extend(Object.clone(this.defaultInteractionParameters), interactionParameters || {});
    // call constructor from ModalPopup with params content, shortcuts, options
    $super(
     this.createContent(this.interactionParameters),
      {
       "show"  : { method : this.showDialog,  keys : [] },
       "close" : { method : this.closeDialog, keys : ['Esc'] }
      },
      {
         displayCloseButton : true, 
         verticalPosition : "top",
         backgroundColor : "#FFF"
      }
    );
   this.showDialog();
   this.setClass("my-modal-popup");
  },
 /** Get the content of the modal dialog using ajax */
  createContent : function (data) {
    var content =  new Element('div', {'class': 'modal-popup'});
    // get page content for the pageURL
    new Ajax.Request(data.pageURL,
    {
      method:'get',
      onSuccess: function(transport){
        var response = transport.responseText || "no response text";
        content.insert(response);
        require(['jquery'],function($){
           // Add a css class to the popup modal container to distinguish the edit mode popup from other popups
           // This information will be used to clear only the content of the edit mode popup when it is displayed on an another popup
           $(content).closest('.xdialog-modal-container').addClass('suggestDisplayEditItemModal');
           var itemEditURL = data.pageURL;
           $.initializeItemEditForm(itemEditURL,content,false);
           $.checkItemExists(content);
        });
      },
      onFailure: function(){ content.insert('Something went wrong...'); 
    }
    });

    return content;
  }
});
} // if the parent widget is defined</code>
    </property>
    <property>
      <name>Use XWiki Modal Popup</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>XWiki.SuggestDisplayEditItems</name>
    <number>1</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>6afc2baf-1884-49fa-a64f-94053bc12537</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>// Configure require.js to use jquery-form (https://github.com/malsup/form)
require.config({
   "paths": { "jquery-form": "$services.webjars.url('jquery-form/3.51/jquery.form.js')" },
   "shim": { "jquery-form": [ "jquery" ] }
});</code>
    </property>
    <property>
      <name>jquery-form plugin</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>XWiki.SuggestDisplayEditItems</name>
    <number>2</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>d536d42d-2fee-4d9d-98b1-f9aa342c77be</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require(['jquery','xwiki-meta'],function($, xm){
$.extend({
// Method to initialize the new item btn
initializeNewEntryBtn : function() {
   $("body").on("click",".newEntryBtn",function(event) {
      var index = $(".newEntryBtn").index($(this));
      var className = $("input[type='hidden'][id$='_className']").eq(index).val();
      var propertyName = $("input[type='hidden'][id$='_propertyName']").eq(index).val();
      var itemParent = $("#itemParent").eq(0).val();
      var itemSpace = $("#itemSpace").eq(0).val();
      // Open XWiki Modal
      var newItemURL = "$xwiki.getURL("XWiki.SuggestDisplayEditItems",'view','xpage=plain')";
      newItemURL = newItemURL + '&amp;action=newItem' + "&amp;className=" + className + "&amp;propertyName=" + propertyName + "&amp;parent=" + itemParent + "&amp;space=" + itemSpace;
      $('.xdialog-modal-container.suggestDisplayEditItemModal').remove();
      new XWiki.widgets.EditModePopup({pageURL: newItemURL});
   });
},
// Check if new items exists
checkItemExists : function(XWModalContent) {
   $(".suggestDisplayEditItemModal .checkItemExists").click(function(event) {
   var checkURL = "$xwiki.getURL('XWiki.SuggestDisplayEditItems','view','xpage=plain&amp;outputSyntax=plain&amp;action=checkItemExists')";
   var data = $(this).parents().eq(2).serialize();
   checkURL = checkURL + "&amp;" + data;
   if ($.trim($("#docName").val()) == "") {
      new XWiki.widgets.Notification("$services.localization.render('xe.totem.inputmustnotbeempty')", 'error',{timeout:1});
   }
   else
   {
     new XWiki.widgets.Notification("Saving", 'inprogress');
     $.ajax({
      url:checkURL,
      dataType: 'json',
      success: function(rep, textStatus, jqXHR) {
         if (rep) { 
             if (rep.results == false) {
                new XWiki.widgets.Notification("The target document already exists. Please choose a different name!", 'error',{timeout:1});
             }
             else
             {
                 // Load item edit file
                 var editNewItemFormURL = rep.results + "&amp;xpage=plain";
                 $(XWModalContent).load(editNewItemFormURL, function() {
                   $.initializeItemEditForm(editNewItemFormURL,XWModalContent,true);
                 });
             }
         }
      },
      complete: function(event, XMLHttpRequest, ajaxOptions) {
        // ToDo
        $(".xnotification-inprogress").remove();    
      },
      error: function(jqXHR, textStatus, errorThrown) {
        // ToDo
      }
     });
    }
   });
},
// Method to intialize the item edit form
initializeItemEditForm : function(itemEditURL,XWModalContent,isNewItem) {
   $(".suggestDisplayEditItemModal .xdialog-box").addClass("xwmplrg");
   // If the item is a new one (not yet saved) then : 
   // Enclose the modal popup content in html form
   // Add action_save, action_cancel buttons ...etc.
   if (isNewItem) {
     var itemSaveURL = itemEditURL.replace('/edit/','/save/');
     var form_token = xm ? xm.form_token : $('meta[name="form_token"]').attr('content');
     var wikiName = xm ? xm.wiki : $('meta[name="wiki"]').attr('content');
     var inputs = '&lt;input class="btn btn-primary" type="button" name="action_save" title="Alt+Shift+S" value="Save"&gt; ';
     inputs += '&lt;input class="btn btn-default" type="button" name="action_cancel" title="Alt+C" value="Cancel"&gt;';
     inputs += '&lt;input type="hidden" name="form_token" value="' + form_token + '" /&gt;';
     inputs += '&lt;input type="hidden" name="xredirect" value="" /&gt;';
     inputs += '&lt;input type="hidden" name="wikiName" id="wikiName" value="' + wikiName + '" /&gt;';
     $(XWModalContent).html('&lt;form action="' + itemSaveURL + '" id="editItemForm"&gt;' + $(XWModalContent).html() + inputs + '&lt;/form&gt;');
   }
   // Initialize attachment-picker fields
   $(".suggestDisplayEditItemModal .attachment-picker-start").click(function(event) {
      // Add the form fields value to the "itemEditURL", for saving these values and
      // re fill the edit form with those values if we go into another popup like the attachments selector
      itemEditURL += "&amp;" + $("#editItemForm").serialize();
      var attPickerURL = $(this).attr("href") + "&amp;xpage=plain";
      var wikiName = xm ? xm.wiki : $('meta[name="wiki"]').attr('content');
      attPickerURL = attPickerURL + "&amp;wikiName=" + wikiName;
      if (attPickerURL.indexOf('docname=' + wikiName + ":") == -1) {
         attPickerURL = attPickerURL.replace('docname=','docname=' + wikiName + ':');
      }
      $.initializeAttachmentPicker(itemEditURL,attPickerURL,XWModalContent,isNewItem);
      event.preventDefault();
   });
   // Initialize textarea fields Wysiwyg
   #set($wysiwygConfig = {})
   #wysiwyg_storeConfig($wysiwygConfig $doc "HOOKID" true)
   #set($jsVarName = "wysiwygConfig${util.generateRandomString(4)}")
   Wysiwyg.onModuleLoad(function() {
   $(".suggestDisplayEditItemModal textarea").each(function() {
      var wysiwygConfig = {
         #set($separator = '')
         #foreach($entry in $wysiwygConfig.entrySet())
           #if($entry.value || "$!entry.value" != '')
              ${separator}$entry.key: '$!{escapetool.javascript($entry.value)}'
              #set($separator = ',')
           #end
         #end
      };
      wysiwygConfig.hookId = $(this).attr("id");
      wysiwygConfig.inputURL = wysiwygConfig.inputURL.replace('/edit/','/view/');
      new WysiwygEditor(wysiwygConfig); 
   });
   });
    // Initialize date picker fields : TODO
    // Intialize save button
    $("#editItemForm input[name='action_save']").click(function(event) {
       $.saveSuggestDisplayItem(XWModalContent);
       event.preventDefault();
    });
    // Intialize cancel button
    $("#editItemForm input[name='action_cancel']").click(function(event) {
       $(".suggestDisplayEditItemModal .xdialog-close").click();
       event.preventDefault();
    });
},
// Method to intialize the attachment picker after loading it
initializeAttachmentPicker : function(itemEditURL,attPickerURL,XWModalContent,isNewItem) {
 $(XWModalContent).addClass("ajaxloader");
 $(XWModalContent).load(attPickerURL,function() {
 $(XWModalContent).removeClass("ajaxloader");
   //Initialize attachment picker btns
   $(".suggestDisplayEditItemModal input[name='action_upload'][type='submit']").click(function(event) {
      // Check input file filed
      if ($("#attachfile").val() == "") {// Empty field
           new XWiki.widgets.Notification("$services.localization.render('xe.attachmentSelector.upload.error.noFile')", 'error');
      }
      else
      {
           //Check allowed extensions
           var allowedExts = $("#attachfile").attr("title");
           allowedExts = (allowedExts != "") ? allowedExts.split(', ') : new Array();
           var fileExt = null;
           var filename = $("#attachfile").val();
           var fpath = filename.replace('\\', '/');
           var pieces = fpath.split('/');
           if (pieces.length &gt; 0) {
               var basename = pieces[pieces.length-1];
               pieces = basename.split('.');
               fileExt = pieces[pieces.length-1].toLowerCase();
           }
           if(fileExt &amp;&amp; allowedExts.indexOf(fileExt) == -1) {
               new XWiki.widgets.Notification("$services.localization.render('xe.attachmentSelector.upload.error.badExtension')", 'error');
           }
           else{
               new XWiki.widgets.Notification("$services.localization.render('xe.attachmentSelector.upload.inProgress')", 'inprogress');
               require(['jquery-form'],function(jqf) {
                  $('#uploadAttachment').ajaxSubmit({
                     success: function(){
                        // Reload the page after upload
                        $(".xnotification-inprogress").remove();
                        if (!isNewItem) {
                          $.initializeAttachmentPicker(itemEditURL,attPickerURL,XWModalContent,isNewItem);
                        }
                       else
                        {
                           // Save the item, close the attachmeents selector popup and show the item edit form
                           // Note that the require['xwiki-meta'] (meta information about the current document) is not available on  
                           // XWiki versions &lt; 6.3, then we get the form_token directly from the DOM.
                           var form_token = xm ? xm.form_token : $('meta[name="form_token"]').attr('content');
                           var itemSaveURL = itemEditURL.replace('/edit/','/save/') + "&amp;form_token=" + form_token;
                           new XWiki.widgets.Notification("$services.localization.render('xe.attachmentSelector.upload.inProgress')", 'inprogress');
                           $.ajax({
                             url:itemSaveURL,
                             complete: function(event, XMLHttpRequest, ajaxOptions) {
                                // Refresh the attachment selector popup
                                $(XWModalContent).load(attPickerURL,function() {
                                   $.initializeAttachmentPicker(itemEditURL,attPickerURL,XWModalContent,isNewItem);
                                   $(".xnotification-inprogress").remove();
                                });
                             }
                           });
                         }   
                      }
                  });
               });
             }  
           }
           event.preventDefault();
        });
        // Initialize delete attachment btns
        $(".suggestDisplayEditItemModal a.delete").click(function(event) {
            var deleteURL = $(this).attr("href");
            var attElem =  $(this).parents().eq(3);
            new XWiki.widgets.ConfirmationBox({onYes: function() {
               new XWiki.widgets.Notification("$services.localization.render('core.viewers.attachments.delete.inProgress')",'inprogress');
               $.ajax({
	          url: deleteURL,
		  type: 'POST',
		  complete: function(event, XMLHttpRequest, ajaxOptions) {
                     $(".xnotification-inprogress").remove();
                     new XWiki.widgets.Notification("$services.localization.render('core.viewers.attachments.delete.done')","done");
                     attElem.remove();
                  }
	       });
             }}, {confirmationText:"$services.localization.render('core.viewers.attachments.delete.confirm')"});
            event.preventDefault();
        });
        // Initialize select attachment btns
        $(".suggestDisplayEditItemModal a.select").click(function(event) {
            var selectURL = $(this).attr("href");
            new XWiki.widgets.Notification("Selecting",'inprogress');
            $.ajax({
	       url:selectURL,
	       type:'POST',
	       complete: function(event, XMLHttpRequest, ajaxOptions) {
                  $(".xnotification-inprogress").remove();
                  new XWiki.widgets.Notification("Attachment selected","done");
                  // Reload form with selected image modal
                  $(XWModalContent).load(itemEditURL,function(){
                     $.initializeItemEditForm(itemEditURL,XWModalContent,isNewItem);
                  });
               }
	    });
            event.preventDefault();
        });
        // Initialize attachment picker close button
        $("#attachment-picker-close").click(function(event) {
           // Reload edit item form
           $(XWModalContent).load(itemEditURL,function() {
              $.initializeItemEditForm(itemEditURL,XWModalContent,isNewItem);
           });
           event.preventDefault();
        });
    });
},
// Save sugggest display item
saveSuggestDisplayItem : function(XWModalContent) {
   var saveURL = $("#editItemForm").attr("action");
   var formData = $("#editItemForm").serialize();
   $.ajax({
	url:saveURL + "?" + formData,
	type:'GET',
	success:function(rep, textStatus, jqXHR) {
	},
	complete:function(event, XMLHttpRequest, ajaxOptions) {
          // Close the XWiki Modal
          $(".suggestDisplayEditItemModal .xdialog-close").click();
        }
    });
}
});
$.initializeNewEntryBtn();
});</code>
    </property>
    <property>
      <name>Edit suggest display items</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>XWiki.SuggestDisplayEditItems</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>b6e2cfa8-bcc4-41c1-9d1f-6242a6c5cb4c</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>.xwmplrg{
   width:80%;
}
.ajaxloader{
   background-image: url("$xwiki.getSkinFile('icons/xwiki/ajax-loader-large.gif')");
   background-repeat: no-repeat;
   background-position: center;
   height: 100px
}

.ajaxloader div{
   display:none;
}
.newEntryBtn{
   margin: 0 5px;
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>XWiki Modal Popup CSS</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <content>{{velocity}}
#**
* Get item className from hibernate query
*#
#macro(getItemClassName $className $propertyName)
   ## TODO: improve this macro
   #set($itemClassName = "")
   #set($propertyClass = $xwiki.getDocument($className).getxWikiClass().get($propertyName).getPropertyClass())
   #set($hibquery = $propertyClass.sql)
   #set($clsStartIndex = $hibquery.toLowerCase().indexOf('.classname'))
   ## The query can use ' or " as string delemitor, so we enforce the usage of '.
   ## I am quite confident that the className does not contain ' or " characters, but if it is the case
   ## we will have a bug.
   #set($subQuery = $hibquery.substring($clsStartIndex).replaceAll('"', "'"))
   #set($results = $subQuery.split("'"))
   ## We get the second result, the one between the 2 ' characters
   #set($itemClassName = $results[1])
#end
#set($action = $request.action)
#if("$!action" != "")
   #if($action == "editItem" &amp;&amp; "$!request.itemDocRef" != "" &amp;&amp; $xwiki.exists("$request.itemDocRef") &amp;&amp; "$!request.className" != "" &amp;&amp; "$!request.propertyName" != "")
     #set($itemDocRef = $request.itemDocRef)
     #if($xwiki.hasAccessLevel('edit',$xcontext.user,${itemDocRef}))
       #set($discard = $context.setDisplayMode("edit"))
       #set($className = $request.className)
       #set($propertyName = $request.propertyName)
       #getItemClassName($className,$propertyName)
       #set($doc = $xwiki.getDocument($itemDocRef))
       #set($wikiName = $doc.getDocumentReference().getWikiReference().getName())
       #if($itemClassName != "" &amp;&amp; $xwiki.exists($itemClassName))
          #set($itemClassSheet = $itemClassName.substring(0,$itemClassName.indexOf('Class')))
          #set($itemClassSheet = "${itemClassSheet}Sheet")
          ## To show the edit attachment button of the attachment selector we need to check 
          ## if the current user has edit rights on the item document and then set the $hasEdit variable to true 
          #set($itemEditPerm = $xwiki.hasAccessLevel('edit',$xcontext.user,${itemDocRef}))
          #if($itemEditPerm &amp;&amp; !$hasEdit)
             #set($hasEdit = true)
          #end
          {{html wiki="true"}}
          &lt;form action="$xwiki.getURL($itemDocRef,'save')" id="editItemForm"&gt;
            {{include reference="$itemClassSheet"/}}
             &lt;input type="hidden" id="wikiName" value="$wikiName"/&gt;
             &lt;input type="hidden" name="form_token" value="$!{services.csrf.getToken()}" /&gt;
             &lt;input type="hidden" name="xredirect" value="" /&gt;
             &lt;input class="btn btn-primary" type="button" name="action_save" title="Alt+Shift+S" value="Save"&gt;
             &lt;input class="btn btn-default" type="button" name="action_cancel" title="Alt+C" value="Cancel"&gt;
          &lt;/form&gt;
          {{/html}}
       #else
          ##TODO
       #end
     #else

        {{error}}$services.localization.render('error') : $services.localization.render('notallowed'){{/error}}

     #end 
   #elseif($action == "newItem" &amp;&amp; "$!request.className" != "" &amp;&amp; "$!request.propertyName" != "" &amp;&amp; "$!request.parent" != "" &amp;&amp; "$!request.space" != "")
       #set($className = $request.className)
       #set($propertyName = $request.propertyName)
       #set($parent = $request.parent)
       #set($space = $request.space)
       #getItemClassName($className,$propertyName)
       #if($itemClassName != "" &amp;&amp; $xwiki.exists($itemClassName))
          #set($itemClassTemplate = $itemClassName.substring(0,$itemClassName.indexOf('Class')))
          #set($itemClassTemplate = "${itemClassTemplate}Template")
       #else
          ##TODO
       #end
       {{html}}
         &lt;form action="" id="newdoc" method="post"&gt;
            &lt;div&gt;
              &lt;input type="hidden" name="form_token" value="$!{services.csrf.getToken()}" /&gt;
              &lt;input type="hidden" name="parent" value="${parent}"/&gt;
              &lt;input type="hidden" name="template" value="${itemClassTemplate}"/&gt;
              &lt;input type="hidden" name="sheet" value="1"/&gt;
              &lt;label for="spaceName"&gt;Space: &lt;/label&gt;&lt;input type="text" id="spaceName" name="spaceName" value="${space}" size="8"/&gt;
              &lt;label for="docName"&gt;Document: &lt;/label&gt;&lt;input type="text" id="docName" name="docName" value="" class="withTip"'/&gt;         
              &lt;span class="buttonwrapper"&gt;&lt;input type="button" value="Create this document" class="button checkItemExists"/&gt;&lt;/span&gt;
            &lt;/div&gt;
          &lt;/form&gt;
        {{/html}}
   #elseif($action == "checkItemExists" &amp;&amp; "$!request.spaceName" != "" &amp;&amp; "$!request.docName" != "")
      #set($itemRef = "${request.spaceName}.${request.docName}")
      #if($xwiki.exists($itemRef))
           {"results":false}
      #else
         #set($documentReference = $services.model.createDocumentReference(null, $request.spaceName, $request.docName))
         #set($title = $escapetool.url($request.docName))
         #set($parent = $escapetool.url($request.parent))
         #set($template = $escapetool.url($request.template))
         #set($redirectURL = $xwiki.getURL($documentReference,'edit',"template=${template}&amp;parent=${parent}&amp;title=${title}"))
           {"results":"$redirectURL"}
        #end
   #end
#end
{{/velocity}}</content>
</xwikidoc>
